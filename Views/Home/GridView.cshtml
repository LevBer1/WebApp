@* @model IEnumerable<WebApplication1.Models.ExcelDataModel> *@
@model List<WebApplication1.Models.ExcelDataModel>

<h2>Data Grid View</h2>
<input type="text" id="filterInput" placeholder="Filter table">
<button id="filterButton">Filter</button>
<table class="table" id="myTable">
    <thead>
        <tr>
            <th>Number</th>
            <th>Name_Number</th>
            <th>ID</th>
            <th>Comments</th>
            <!-- Add other header columns as needed -->
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Column1</td>
                <td>@item.Column2</td>
                <td>@item.Column3</td>
                <td>@item.Column4</td>
                <!-- Add other data columns as needed -->
            </tr>
        }
    </tbody>
</table>
<script>

    // Get the input element, button, and the table
    const filterInput = document.getElementById('filterInput');
    const filterButton = document.getElementById('filterButton');
    const table = document.getElementById('myTable');
    const rows = table.getElementsByTagName('tr');

    // Add an event listener to the button
    filterButton.addEventListener('click', function () {
        const filterValue = filterInput.value.toLowerCase();

    //// Get the input element and the table
    //    const filterInput = document.getElementById('filterInput');
    //    const table = document.getElementById('myTable');
    //    const rows = table.getElementsByTagName('tr');

    //    // Add an event listener to the input field
    //    filterInput.addEventListener('keyup', function () {
    //    const filterValue = filterInput.value.toLowerCase();

        // Loop through all table rows and hide those that don't match the filter
        for (let i = 1; i < rows.length; i++) { // Start from 1 to skip the header row
            const row = rows[i];
        let found = false;

        // Loop through all the cells in a row and check for a match
        for (let j = 0; j < row.cells.length; j++) {
                const cell = row.cells[j];
        if (cell) {
                    const cellText = cell.textContent || cell.innerText;
                    if (cellText.toLowerCase().indexOf(filterValue) > -1) {
            found = true;
        break;
                    }
                }
            }

        // Show or hide the row based on the filter match
        if (found) {
            row.style.display = '';
            } else {
            row.style.display = 'none';
            }
        }
    });
</script>



